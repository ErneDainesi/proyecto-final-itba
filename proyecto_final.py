# -*- coding: utf-8 -*-
"""Proyecto Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12PMzUYQlsN-Knx3VeCAk6LLHSRmqeFEk
"""

import pandas as pd
import numpy as np
#  import matplotlib.pyplot as plt (no hace falta importarlo aca ahora porque lo importamos en mostrar_graficos)
from graficos import *
from validaciones import pedir_fecha, input_pais, pedir_opcion

plt.close('all')


def funcion1(df1):
    pais = input_pais(df1)
    df_pais = df1[
        df1["location"] ==
        pais]  #Creamos un dataframe con la informacion del pais seleccionado.
    fechas = df_pais["date"]
    nuevos_casos = df_pais["new_cases"]
    muertes_totales = df_pais["total_deaths"]
    plt.figure(figsize=(12, 4))
    armar_grafico_f1(1, 2, 1, fechas, nuevos_casos, "b-", "Casos")
    armar_grafico_f1(1, 2, 2, fechas, muertes_totales, "r-.", "Fallecidos")
    plt.show()


def funcion2(df1):
    pais1 = input_pais(df1)
    pais2 = input_pais(df1)

    df_paises = df1[df1["location"].isin([
        pais1, pais2
    ])]  #Creamos un dataframe con la informacion del pais seleccionado.

    all_dates = df1["date"].tolist()
    fecha_min = df1["date"].min()
    fecha_max = df1["date"].max()
    print(
        f"Vamos a analizar {pais1} con {pais2} en las fechas que seleccione. Inserte fechas desde {fecha_min} hasta {fecha_max} con formato aaaa-mm-dd: "
    )

    fecha_ini = pedir_fecha(all_dates,
                            "Insertar fecha inicial para el analisis: ")
    fecha_fin = pedir_fecha(all_dates,
                            "Insertar fecha final para el analisis: ")

    if fecha_fin > fecha_ini:
        mask = (df_paises['date'] >= fecha_ini) & (df_paises['date'] <=
                                                   fecha_fin)
        df1_temp = df_paises.loc[mask]

        x = df1_temp["date"]
        y1 = df1_temp["total_cases"].where(df1_temp['location'] == pais1)
        y2 = df1_temp["total_cases"].where(df1_temp['location'] == pais2)
        y3 = df1_temp["total_deaths"].where(df1_temp['location'] == pais1)
        y4 = df1_temp["total_deaths"].where(df1_temp['location'] == pais2)

        #  Problema con intersecion
        #  dicc_pais1 = df1_temp[df1_temp["location"] == pais1].to_dict("list")
        #  dicc_pais2 = df1_temp[df1_temp["location"] == pais2].to_dict("list")
        #  pais1_x = [dicc_pais1["date"][0]]
        #  pais1_y = [dicc_pais1["total_cases"][0]]
        #  pais2_x = [dicc_pais2["date"][0]]
        #  pais2_y = [dicc_pais2["total_cases"][0]]
        #
        #  cruce_x = []
        #  cruce_y = []
        #
        #  for i in range(len(dicc_pais1["date"])):
        #      pais1_x.append(dicc_pais1["date"][i])
        #      pais1_y.append(dicc_pais1["total_cases"][i])
        #      pais2_x.append(dicc_pais2["date"][i])
        #      pais2_y.append(dicc_pais2["total_cases"][i])
        #
        #      if (pais2_y[i] == pais1_y[i]) or (pais2_y[i] > pais1_y[i] and pais2_y[i-1] < pais1_y[i-1]) or (pais2_y[i] < pais2_y[i] and pais2_y[i-1] > pais1_y[i-1]):
        #          print(pais1_x[i])
        #          print(pais1_y[i])
        #          cruce_x.append(pais1_x[i])
        #          cruce_y.append(pais1_y[i])
        #

        plt.figure(figsize=(12, 4))
        armar_grafico_f2(1, 2, 1, x, (y1, y2), pais1, pais2, "Casos")
        armar_grafico_f2(1, 2, 2, x, (y3, y4), pais1, pais2, "Fallecimientos")
        plt.show()

    else:
        print("La fecha final no es mayor a la inicial")


def funcion3(df1):
    cantidad_paises = int(
        input("Ingrese cantidad de paises que desea analizar: "))
    paises = []
    for i in range(cantidad_paises):
        pais = input_pais(df1)
        paises.append(pais)

    df_paises = df1[df1["location"].isin(
        paises)]  #Creamos un dataframe con la informacion de la lista
    all_dates = df1["date"].tolist()
    all_dates.sort()
    fecha_min = df1["date"].min()
    fecha_max = df1["date"].max()
    print(
        f"Vamos a analizar de los paises seleccionados. Inserte fechas desde {fecha_min} hasta {fecha_max} con formato aaaa-mm-dd: "
    )

    fecha_ini = pedir_fecha(all_dates,
                            "Insertar fecha inicial para el analisis: ")
    fecha_fin = pedir_fecha(all_dates,
                            "Insertar fecha final para el analisis: ")

    if fecha_fin > fecha_ini:
        mask = (df_paises['date'] >= fecha_ini) & (df_paises['date'] <=
                                                   fecha_fin)
        df1_temp = df_paises.loc[mask]

    plt.figure(figsize=(20, 10))
    armar_grafico_f3(df1_temp, paises)
    plt.show()


def ingresar_a_opcion_elegida(opcion_elegida, df1):
    while opcion_elegida != 0:
        if opcion_elegida == 1:
            funcion1(df1)
        elif opcion_elegida == 2:
            funcion2(df1)
        elif opcion_elegida == 3:
            funcion3(df1)
        opcion_elegida = input(
            "Ingrese la opcion que desee realizar (1, 2 o 3): ")


def mostrar_menu():
    print("Opciones de la aplicacion")
    print("Opcion 1: Casos y fallecimientos por pais a eleccion.")
    print(
        "Opcion 2: Comparacion entre 2 paises a eleccion (Casos y fallecimientos)."
    )
    print("Opcion 3: Comparacion entre mas paises en escala logaritmica.")
    print("Ingrese 0 para finalizar")


def menu():
    df1 = pd.read_csv(
        "https://covid.ourworldindata.org/data/ecdc/full_data.csv")
    mostrar_menu()
    opcion_elegida = pedir_opcion()
    ingresar_a_opcion_elegida(opcion_elegida, df1)


menu()
